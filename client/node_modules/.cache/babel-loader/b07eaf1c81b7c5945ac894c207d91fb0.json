{"ast":null,"code":"import { ADD_CONTACT, DELETE_CONTACT, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, CLEAR_FILTER, CONTACT_ERROR } from '../types';\nexport default ((state, action) => {\n  switch (action.type) {\n    case GET_CONTACTS:\n      return { ...state,\n        contacts: action.payload,\n        loading: false\n      };\n\n    case ADD_CONTACT:\n      return { ...state,\n        contacts: [action.payload, ...state.contacts],\n        loading: false\n      };\n\n    case UPDATE_CONTACT:\n      return { ...state,\n        contacts: state.contacts.map(contact => contact._id === action.payload._id ? action.payload : contact),\n        loading: false\n      };\n\n    case DELETE_CONTACT:\n      return { ...state,\n        contacts: state.contacts.filter(contact => contact._id !== action.payload),\n        loading: false\n      };\n\n    case CLEAR_CONTACTS:\n      return { ...state,\n        contacts: null,\n        filtered: null,\n        error: null,\n        current: null\n      };\n\n    case SET_CURRENT:\n      return { ...state,\n        current: action.payload\n      };\n\n    case CLEAR_CURRENT:\n      return { ...state,\n        current: null\n      };\n\n    case FILTER_CONTACTS:\n      return { ...state,\n        filtered: state.contacts.filter(contact => {\n          const regex = new RegExp(`${action.payload}`, 'gi');\n          return contact.name.match(regex) || contact.email.match(regex);\n        })\n      };\n\n    case CLEAR_FILTER:\n      return { ...state,\n        filtered: null\n      };\n\n    case CONTACT_ERROR:\n      return { ...state,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["C:/Users/azhar/Desktop/Projects/contact-keeper/client/src/context/contact/contactReducer.js"],"names":["ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","CLEAR_FILTER","CONTACT_ERROR","state","action","type","GET_CONTACTS","contacts","payload","loading","map","contact","_id","filter","CLEAR_CONTACTS","filtered","error","current","FILTER_CONTACTS","regex","RegExp","name","match","email"],"mappings":"AAAA,SACEA,WADF,EAEEC,cAFF,EAGEC,WAHF,EAIEC,aAJF,EAKEC,cALF,EAMEC,YANF,EAOEC,aAPF,QAQO,UARP;AAUA,gBAAe,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAChC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKC,YAAL;AACE,aAAO,EACL,GAAGH,KADE;AAELI,QAAAA,QAAQ,EAAEH,MAAM,CAACI,OAFZ;AAGLC,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKb,WAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELI,QAAAA,QAAQ,EAAE,CAACH,MAAM,CAACI,OAAR,EAAiB,GAAGL,KAAK,CAACI,QAA1B,CAFL;AAGLE,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKT,cAAL;AACE,aAAO,EACL,GAAGG,KADE;AAELI,QAAAA,QAAQ,EAAEJ,KAAK,CAACI,QAAN,CAAeG,GAAf,CAAoBC,OAAD,IAC3BA,OAAO,CAACC,GAAR,KAAgBR,MAAM,CAACI,OAAP,CAAeI,GAA/B,GAAqCR,MAAM,CAACI,OAA5C,GAAsDG,OAD9C,CAFL;AAKLF,QAAAA,OAAO,EAAE;AALJ,OAAP;;AAOF,SAAKZ,cAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELI,QAAAA,QAAQ,EAAEJ,KAAK,CAACI,QAAN,CAAeM,MAAf,CACPF,OAAD,IAAaA,OAAO,CAACC,GAAR,KAAgBR,MAAM,CAACI,OAD5B,CAFL;AAKLC,QAAAA,OAAO,EAAE;AALJ,OAAP;;AAOF,SAAKK,cAAL;AACE,aAAO,EACL,GAAGX,KADE;AAELI,QAAAA,QAAQ,EAAE,IAFL;AAGLQ,QAAAA,QAAQ,EAAE,IAHL;AAILC,QAAAA,KAAK,EAAE,IAJF;AAKLC,QAAAA,OAAO,EAAE;AALJ,OAAP;;AAOF,SAAKnB,WAAL;AACE,aAAO,EACL,GAAGK,KADE;AAELc,QAAAA,OAAO,EAAEb,MAAM,CAACI;AAFX,OAAP;;AAIF,SAAKT,aAAL;AACE,aAAO,EACL,GAAGI,KADE;AAELc,QAAAA,OAAO,EAAE;AAFJ,OAAP;;AAIF,SAAKC,eAAL;AACE,aAAO,EACL,GAAGf,KADE;AAELY,QAAAA,QAAQ,EAAEZ,KAAK,CAACI,QAAN,CAAeM,MAAf,CAAuBF,OAAD,IAAa;AAC3C,gBAAMQ,KAAK,GAAG,IAAIC,MAAJ,CAAY,GAAEhB,MAAM,CAACI,OAAQ,EAA7B,EAAgC,IAAhC,CAAd;AACA,iBAAOG,OAAO,CAACU,IAAR,CAAaC,KAAb,CAAmBH,KAAnB,KAA6BR,OAAO,CAACY,KAAR,CAAcD,KAAd,CAAoBH,KAApB,CAApC;AACD,SAHS;AAFL,OAAP;;AAOF,SAAKlB,YAAL;AACE,aAAO,EACL,GAAGE,KADE;AAELY,QAAAA,QAAQ,EAAE;AAFL,OAAP;;AAIF,SAAKb,aAAL;AACE,aAAO,EACL,GAAGC,KADE;AAELa,QAAAA,KAAK,EAAEZ,MAAM,CAACI;AAFT,OAAP;;AAIF;AACE,aAAOL,KAAP;AAlEJ;AAoED,CArED","sourcesContent":["import {\r\n  ADD_CONTACT,\r\n  DELETE_CONTACT,\r\n  SET_CURRENT,\r\n  CLEAR_CURRENT,\r\n  UPDATE_CONTACT,\r\n  CLEAR_FILTER,\r\n  CONTACT_ERROR,\r\n} from '../types';\r\n\r\nexport default (state, action) => {\r\n  switch (action.type) {\r\n    case GET_CONTACTS:\r\n      return {\r\n        ...state,\r\n        contacts: action.payload,\r\n        loading: false,\r\n      };\r\n    case ADD_CONTACT:\r\n      return {\r\n        ...state,\r\n        contacts: [action.payload, ...state.contacts],\r\n        loading: false,\r\n      };\r\n    case UPDATE_CONTACT:\r\n      return {\r\n        ...state,\r\n        contacts: state.contacts.map((contact) =>\r\n          contact._id === action.payload._id ? action.payload : contact\r\n        ),\r\n        loading: false,\r\n      };\r\n    case DELETE_CONTACT:\r\n      return {\r\n        ...state,\r\n        contacts: state.contacts.filter(\r\n          (contact) => contact._id !== action.payload\r\n        ),\r\n        loading: false,\r\n      };\r\n    case CLEAR_CONTACTS:\r\n      return {\r\n        ...state,\r\n        contacts: null,\r\n        filtered: null,\r\n        error: null,\r\n        current: null,\r\n      };\r\n    case SET_CURRENT:\r\n      return {\r\n        ...state,\r\n        current: action.payload,\r\n      };\r\n    case CLEAR_CURRENT:\r\n      return {\r\n        ...state,\r\n        current: null,\r\n      };\r\n    case FILTER_CONTACTS:\r\n      return {\r\n        ...state,\r\n        filtered: state.contacts.filter((contact) => {\r\n          const regex = new RegExp(`${action.payload}`, 'gi');\r\n          return contact.name.match(regex) || contact.email.match(regex);\r\n        }),\r\n      };\r\n    case CLEAR_FILTER:\r\n      return {\r\n        ...state,\r\n        filtered: null,\r\n      };\r\n    case CONTACT_ERROR:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}